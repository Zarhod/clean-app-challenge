// src/AvatarSelectionModal.js
import React, { useState } from 'react';
import ListAndInfoModal from './ListAndInfoModal'; // Assurez-vous que ce chemin est correct

const avatars = ['üòÄ', 'üòÇ', 'üòé', 'ü§©', 'ü•≥', 'ü§ì', 'ü§ñ', 'üëª', 'üëΩ', 'üê∂', 'üê±', 'üê≠', 'üêπ', 'üê∞', 'ü¶ä', 'üêª', 'üêº', 'üê®', 'üêØ', 'ü¶Å', 'üêÆ', 'üê∑', 'üê∏', 'üêµ', 'ü¶â', 'ü¶ã', 'üê¢', 'üêç', 'üêâ', 'üê≥', 'üê¨', 'üê†', 'üêô', 'ü¶Ä', 'ü¶û', 'ü¶ê', 'ü¶ë', 'üê°', 'üêä', 'üêÖ', 'üêÜ', 'ü¶ì', 'ü¶ç', 'ü¶ß', 'üêò', 'ü¶õ', 'ü¶è', 'üê™', 'ü¶í', 'ü¶ò', 'üêÉ', 'üêÇ', 'üêÑ', 'üêé', 'üêñ', 'üêè', 'üêë', 'üêê', 'ü¶å', 'üêï', 'üê©', 'üêà', 'üêì', 'ü¶É', 'üïäÔ∏è', 'ü¶Ö', 'ü¶Ü', 'ü¶¢', 'ü¶©', 'ü¶ú', 'üê¶', 'üêß', 'ü¶â', 'ü¶ö', 'ü¶É', 'üêì', 'üêî', 'üê£', 'üê§', 'üê•', 'üë∂', 'üë¶', 'üëß', 'üßë', 'üë®', 'üë©', 'üë¥', 'üëµ', 'üßì', 'üë®‚Äç‚öïÔ∏è', 'üë©‚Äç‚öïÔ∏è', 'üë®‚Äçüéì', 'üë©‚Äçüéì', 'üë®‚Äçüè´', 'üë©‚Äçüè´', 'üë®‚Äç‚öñÔ∏è', 'üë©‚Äç‚öñÔ∏è', 'üë®‚Äçüåæ', 'üë©‚Äçüåæ', 'üë®‚Äçüç≥', 'üë©‚Äçüç≥', 'üë®‚Äçüîß', 'üë©‚Äçüîß', 'üë®‚Äçüè≠', 'üë©‚Äçüè≠', 'üë®‚Äçüíº', 'üë©‚Äçüíº', 'üë®‚Äçüî¨', 'üë©‚Äçüî¨', 'üë®‚Äçüíª', 'üë©‚Äçüíª', 'üë®‚Äçüé§', 'üë©‚Äçüé§', 'üë®‚Äçüé®', 'üë©‚Äçüé®', 'üë®‚Äç‚úàÔ∏è', 'üë©‚Äç‚úàÔ∏è', 'üë®‚ÄçüöÄ', 'üë©‚ÄçüöÄ', 'üë®‚Äçüöí', 'üë©‚Äçüöí', 'üëÆ', 'üïµÔ∏è', 'üíÇ', 'üë∑', 'ü§¥', 'üë∏', 'üë≥', 'üë≤', 'üßï', 'ü§µ', 'üë∞', 'ü§∞', 'ü§±', 'üëº', 'üéÖ', 'ü§∂', 'ü¶∏', 'ü¶π', 'üßô', 'üßö', 'üßõ', 'üßú', 'üßù', 'üßü', 'üßû', 'üë®‚Äçü¶Ø', 'üë©‚Äçü¶Ø', 'üë®‚Äçü¶º', 'üë©‚Äçü¶º', 'üë®‚Äçü¶Ω', 'üë©‚Äçü¶Ω', 'üó£Ô∏è', 'üë§', 'üë•', 'ü´Ç'];

const AvatarSelectionModal = ({ currentAvatar, onClose, onSave }) => {
  const [selectedAvatar, setSelectedAvatar] = useState(currentAvatar);

  const handleSave = () => {
    onSave(selectedAvatar);
  };

  return (
    <ListAndInfoModal title="S√©lectionner un Avatar" onClose={onClose} sizeClass="max-w-xs sm:max-w-md">
      <div className="text-center mb-4">
        <p className="text-lg text-gray-700 mb-2">Votre avatar actuel:</p>
        <span className="text-5xl">{currentAvatar}</span>
      </div>

      <div className="mb-4">
        <label className="block text-sm font-medium text-gray-700 mb-2">Choisissez un nouvel avatar:</label>
        <div className="grid grid-cols-4 sm:grid-cols-6 md:grid-cols-8 gap-2 max-h-60 overflow-y-auto p-2 border rounded-md bg-gray-50 custom-scrollbar">
          {avatars.map((avatar, index) => (
            <div
              key={index}
              className={`flex items-center justify-center text-3xl p-1.5 rounded-full cursor-pointer transition-all duration-200
                          ${selectedAvatar === avatar ? 'bg-primary text-white scale-110 shadow-lg' : 'hover:bg-gray-200'}`}
              onClick={() => setSelectedAvatar(avatar)}
            >
              {avatar}
            </div>
          ))}
        </div>
        <p className="text-center text-gray-500 text-xs mt-2">Nouvel avatar s√©lectionn√©: <span className="text-xl align-middle">{selectedAvatar}</span></p>
      </div>

      <div className="flex justify-end gap-3">
        <button
          type="button"
          onClick={onClose}
          className="bg-gray-300 hover:bg-gray-400 text-gray-800 font-semibold py-2 px-4 rounded-lg shadow-md transition duration-300"
        >
          Annuler
        </button>
        <button
          type="button"
          onClick={handleSave}
          className="bg-primary hover:bg-secondary text-white font-semibold py-2 px-4 rounded-lg shadow-md transition duration-300 disabled:opacity-50"
          disabled={selectedAvatar === currentAvatar}
        >
          Enregistrer
        </button>
      </div>
    </ListAndInfoModal>
  );
};

export default AvatarSelectionModal;
